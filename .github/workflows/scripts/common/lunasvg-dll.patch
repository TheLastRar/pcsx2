diff --git a/include/lunasvg.h b/include/lunasvg.h
index 06346ff..d959c5a 100644
--- a/include/lunasvg.h
+++ b/include/lunasvg.h
@@ -653,28 +653,33 @@ using ElementList = std::vector<Element>;
 
 class SVGRootElement;
 
-class LUNASVG_API Document {
+class Document {
 public:
+    struct LUNASVG_API DocumentDeleter
+    {
+        void operator()(Document* doc) const { Delete(doc); }
+    };
+
     /**
      * @brief Load an SVG document from a file.
      * @param filename The path to the SVG file.
      * @return A pointer to the loaded `Document`, or `nullptr` on failure.
      */
-    static std::unique_ptr<Document> loadFromFile(const std::string& filename);
+    LUNASVG_API static std::unique_ptr<Document, DocumentDeleter> loadFromFile(const std::string& filename);
 
     /**
      * @brief Load an SVG document from a string.
      * @param string The SVG data as a string.
      * @return A pointer to the loaded `Document`, or `nullptr` on failure.
      */
-    static std::unique_ptr<Document> loadFromData(const std::string& string);
+    LUNASVG_API static std::unique_ptr<Document, DocumentDeleter> loadFromData(const std::string& string);
 
     /**
      * @brief Load an SVG document from a null-terminated string.
      * @param data The string containing the SVG data.
      * @return A pointer to the loaded `Document`, or `nullptr` on failure.
      */
-    static std::unique_ptr<Document> loadFromData(const char* data);
+    LUNASVG_API static std::unique_ptr<Document, DocumentDeleter> loadFromData(const char* data);
 
     /**
      * @brief Load an SVG document from a string with a specified length.
@@ -682,55 +687,55 @@ public:
      * @param length The length of the string in bytes.
      * @return A pointer to the loaded `Document`, or `nullptr` on failure.
      */
-    static std::unique_ptr<Document> loadFromData(const char* data, size_t length);
+    LUNASVG_API static std::unique_ptr<Document, DocumentDeleter> loadFromData(const char* data, size_t length);
 
     /**
      * @brief Applies a CSS stylesheet to the document.
      * @param content A string containing the CSS rules to apply, with comments removed.
      */
-    void applyStyleSheet(const std::string& content);
+    LUNASVG_API void applyStyleSheet(const std::string& content);
 
     /**
      * @brief Selects all elements that match the given CSS selector(s).
      * @param content A string containing the CSS selector(s) to match elements.
      * @return A list of elements matching the selector(s).
      */
-    ElementList querySelectorAll(const std::string& content) const;
+    LUNASVG_API ElementList querySelectorAll(const std::string& content) const;
 
     /**
      * @brief Returns the intrinsic width of the document in pixels.
      * @return The width of the document.
      */
-    float width() const;
+    LUNASVG_API float width() const;
 
     /**
      * @brief Returns the intrinsic height of the document in pixels.
      * @return The height of the document.
      */
-    float height() const;
+    LUNASVG_API float height() const;
 
     /**
      * @brief Returns the smallest rectangle that encloses the document content.
      * @return A Box representing the bounding box of the document.
      */
-    Box boundingBox() const;
+    LUNASVG_API Box boundingBox() const;
 
     /**
      * @brief Updates the layout of the document if needed.
      */
-    void updateLayout();
+    LUNASVG_API void updateLayout();
 
     /**
      * @brief Forces an immediate layout update.
      */
-    void forceLayout();
+    LUNASVG_API void forceLayout();
 
     /**
      * @brief Renders the document onto a bitmap using a transformation matrix.
      * @param bitmap The bitmap to render onto.
      * @param The root transformation matrix.
      */
-    void render(Bitmap& bitmap, const Matrix& matrix = Matrix()) const;
+    LUNASVG_API void render(Bitmap& bitmap, const Matrix& matrix = Matrix()) const;
 
     /**
      * @brief Renders the document to a bitmap with specified dimensions.
@@ -739,31 +744,32 @@ public:
      * @param backgroundColor The background color in 0xRRGGBBAA format.
      * @return A Bitmap containing the raster representation of the document.
      */
-    Bitmap renderToBitmap(int width = -1, int height = -1, uint32_t backgroundColor = 0x00000000) const;
+    LUNASVG_API Bitmap renderToBitmap(int width = -1, int height = -1, uint32_t backgroundColor = 0x00000000) const;
 
     /**
      * @brief Retrieves an element by its ID.
      * @param id The ID of the element to retrieve.
      * @return The Element with the specified ID, or a null `Element` if not found.
      */
-    Element getElementById(const std::string& id) const;
+    LUNASVG_API Element getElementById(const std::string& id) const;
 
     /**
      * @brief Retrieves the document element.
      * @return The root Element of the document.
      */
-    Element documentElement() const;
+    LUNASVG_API Element documentElement() const;
 
     /**
      * @internal
      */
-    SVGRootElement* rootElement() const { return m_rootElement.get(); }
+    LUNASVG_API SVGRootElement* rootElement() const { return m_rootElement.get(); }
 
-    Document(Document&&);
-    Document& operator=(Document&&);
-    ~Document();
+    LUNASVG_API Document(Document&&);
+    LUNASVG_API Document& operator=(Document&&);
+    LUNASVG_API ~Document();
 
 private:
+    LUNASVG_API static void Delete(Document* doc);
     Document();
     Document(const Document&) = delete;
     Document& operator=(const Document&) = delete;
diff --git a/source/lunasvg.cpp b/source/lunasvg.cpp
index bcbe98e..f598dd0 100644
--- a/source/lunasvg.cpp
+++ b/source/lunasvg.cpp
@@ -416,7 +416,7 @@ SVGElement* Element::element(bool layout) const
     return element;
 }
 
-std::unique_ptr<Document> Document::loadFromFile(const std::string& filename)
+std::unique_ptr<Document, Document::DocumentDeleter> Document::loadFromFile(const std::string& filename)
 {
     std::ifstream fs;
     fs.open(filename);
@@ -428,19 +428,19 @@ std::unique_ptr<Document> Document::loadFromFile(const std::string& filename)
     return loadFromData(content);
 }
 
-std::unique_ptr<Document> Document::loadFromData(const std::string& string)
+std::unique_ptr<Document, Document::DocumentDeleter> Document::loadFromData(const std::string& string)
 {
     return loadFromData(string.data(), string.size());
 }
 
-std::unique_ptr<Document> Document::loadFromData(const char* data)
+std::unique_ptr<Document, Document::DocumentDeleter> Document::loadFromData(const char* data)
 {
     return loadFromData(data, std::strlen(data));
 }
 
-std::unique_ptr<Document> Document::loadFromData(const char* data, size_t length)
+std::unique_ptr<Document, Document::DocumentDeleter> Document::loadFromData(const char* data, size_t length)
 {
-    std::unique_ptr<Document> document(new Document);
+    std::unique_ptr<Document, Document::DocumentDeleter> document(new Document);
     if(!document->parse(data, length))
         return nullptr;
     return document;
@@ -521,4 +521,9 @@ Document& Document::operator=(Document&&) = default;
 Document::Document() = default;
 Document::~Document() = default;
 
+void Document::Delete(Document* doc)
+{
+    delete doc;
+}
+
 } // namespace lunasvg
